name: Publish PkarrSharp NuGet Package

on:
  push:
    tags:
      - 'v*'           # Every tag that starts with 'v'

env:
  RUST_TOOLCHAIN: stable
  DOTNET_VERSION: '9.0.x'

jobs:
  build-native:
    name: Build native library (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    # ------------------------------------------------
    #  Rust toolchain + cache
    # ------------------------------------------------
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN }}
        target: ${{ matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc' || 
                   matrix.os == 'macos-latest'   && 'x86_64-apple-darwin'    || 
                                                   'x86_64-unknown-linux-gnu' }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # ------------------------------------------------
    #  Build & upload the native artefact
    # ------------------------------------------------
    - name: Build release library
      run: cargo build --release --verbose

    - name: Collect artefact
      id: collect
      run: |
        mkdir native
        case "${{ matrix.os }}" in
          ubuntu-latest)  cp target/release/libpkarr_ffi.so native/ ;;
          macos-latest)   cp target/release/libpkarr_ffi.dylib native/ ;;
          windows-latest) cp target/release/pkarr_ffi.dll     native/ ;;
        esac

    - name: Upload artefact
      uses: actions/upload-artifact@v3
      with:
        name: native-${{ matrix.os }}
        path: native/

  pack-and-publish:
    name: Pack & publish NuGet
    runs-on: ubuntu-latest
    needs: build-native

    steps:
    - uses: actions/checkout@v3

    # ------------------------------------------------
    #  Retrieve all native binaries built above
    # ------------------------------------------------
    - name: Download native artefacts
      uses: actions/download-artifact@v3
      with:
        pattern: native-*          # grabs the three OS-specific artefacts
        path: ./PkarrSharp

    # ------------------------------------------------
    #  Determine package version from the tag
    # ------------------------------------------------
    - name: Extract version from tag
      run: echo "PACKAGE_VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

    # ------------------------------------------------
    #  .NET SDK
    # ------------------------------------------------
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # ------------------------------------------------
    #  Build & pack
    # ------------------------------------------------
    - name: Restore & build
      run: |
        dotnet restore ./PkarrSharp/PkarrSharp.csproj
        dotnet build   ./PkarrSharp/PkarrSharp.csproj --configuration Release --no-restore

    - name: Pack
      run: |
        dotnet pack ./PkarrSharp/PkarrSharp.csproj \
          --configuration Release \
          --no-build \
          --property:PackageVersion=${{ env.PACKAGE_VERSION }}

    # ------------------------------------------------
    #  Publish to nuget.org
    # ------------------------------------------------
    - name: Push to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push ./PkarrSharp/bin/Release/*.nupkg \
          --api-key $NUGET_API_KEY \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

permissions:
  contents: read